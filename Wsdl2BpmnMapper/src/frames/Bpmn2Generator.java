/*******************************************************************************
 * Copyright 2016 Gabriela D. A. Guardia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at

 *    http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*******************************************************************************/

package frames;

import bpmnComponents.IOElement;
import filters.*;
import java.awt.*;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.Semaphore;
import javax.swing.*;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.apache.woden.*;
import org.apache.woden.WSDLFactory;
import org.apache.woden.WSDLReader;
import org.apache.woden.wsdl20.Description;
import org.apache.woden.wsdl20.xml.*;
import org.apache.ws.commons.schema.*;
import org.camunda.bpm.model.bpmn.Bpmn;
import org.camunda.bpm.model.bpmn.BpmnModelInstance;
import org.camunda.bpm.model.xml.ModelException;
import wsdlComponents.*;

public class Bpmn2Generator extends javax.swing.JFrame {
    
    //Declared variables - Generation
    private Semaphore genSemaphore;
    private URL genSelectedFile;
    DescriptionElement wsdlDescriptionElement;
    DefaultTreeModel model;
    private String genTargetNamespace = "http://www.processTargetNamespace.com";
    private String genExpressionLanguage = "http://www.w3.org/1999/XPath";
    private String genTypeLanguage = "http://www.w3.org/2001/XMLSchema";
    private String genProcessName = "My Process";
    private File genResultFile;
    private LinkedList<IOElement> genInputWsdlElements;
    private LinkedList<IOElement> genOutputWsdlElements;
    private LinkedList<IOElement> genAllWsdlElements;
    private String genServiceAddress;
    private Map<String,String> genAllWsdlOperations;
    private HashMap<String,File> genClasses;
    private TreePath[] inputPaths;
    private TreePath[] outputPaths;
    
    //Declared variables - Validation
    private URL valSelectedFile;
    private Semaphore valSemaphore;
    
    //Creates new form Bpmn2Generator
    public Bpmn2Generator() {
        
        //Initialize LinkedLists
        genAllWsdlElements = new LinkedList<>();
        genInputWsdlElements = new LinkedList<>();
        genOutputWsdlElements = new LinkedList<>();
        genAllWsdlOperations = new HashMap<>();
        genClasses = new HashMap<>();

        //Initialize semaphores
        genSemaphore = new Semaphore(1);
        valSemaphore = new Semaphore(1);
            
        initComponents();
        
        //Centralizes frame
        setLocationRelativeTo(null);
            
        //Make Bpmn2Generator frame visible
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bpmnFileChooser = new javax.swing.JFileChooser();
        wsdlFileChooser = new javax.swing.JFileChooser();
        valFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        genPanel = new javax.swing.JPanel();
        genUploadPanel = new javax.swing.JPanel();
        genSelectFileLabel = new javax.swing.JLabel();
        genSelectFileButton = new javax.swing.JButton();
        genSelectedFileTextField = new javax.swing.JTextField();
        genLoadingFileLabel = new javax.swing.JLabel();
        genLoadingFileProgressBar = new javax.swing.JProgressBar();
        genInvalidDocumentLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        genInputWsdlTree = new javax.swing.JTree();
        genFileLoadingFailedLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        genOutputWsdlTree = new javax.swing.JTree();
        genSelectInputsLabel = new javax.swing.JLabel();
        genSelectOutputsLabel = new javax.swing.JLabel();
        genPerformPanel = new javax.swing.JPanel();
        genSaveFilesButton = new javax.swing.JButton();
        generateBpmnButton = new javax.swing.JButton();
        genTargetNamespaceJTextField = new javax.swing.JTextField();
        genTargetNamespaceJLabel = new javax.swing.JLabel();
        genExpressionLanguageJLabel = new javax.swing.JLabel();
        genTypeLanguageJLabel = new javax.swing.JLabel();
        genExpressionLanguageJTextField = new javax.swing.JTextField();
        genTypeLanguageJTextField = new javax.swing.JTextField();
        genInvalidTargetNamespaceJLabel = new javax.swing.JLabel();
        genInvalidExpressionLanguageJLabel = new javax.swing.JLabel();
        genInvalidTypeLanguageJLabel = new javax.swing.JLabel();
        generatingBpmnJLabel = new javax.swing.JLabel();
        generatingBpmnProgressBar = new javax.swing.JProgressBar();
        generationFailedJLabel = new javax.swing.JLabel();
        genProcessNameJLabel = new javax.swing.JLabel();
        genProcessNameJTextField = new javax.swing.JTextField();
        valPanel = new javax.swing.JPanel();
        valUploadPanel = new javax.swing.JPanel();
        valSelectFileLabel = new javax.swing.JLabel();
        valSelectFileButton = new javax.swing.JButton();
        valSelectedFileTextField = new javax.swing.JTextField();
        valFileLoadingFailedLabel = new javax.swing.JLabel();
        valPerformPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        valResultTextArea = new javax.swing.JTextArea();
        validateBpmnButton = new javax.swing.JButton();
        validatingBpmnProgressBar = new javax.swing.JProgressBar();
        validatingBpmnJLabel = new javax.swing.JLabel();

        bpmnFileChooser.setAcceptAllFileFilterUsed(false);
        bpmnFileChooser.setDialogTitle("Open");
        bpmnFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        wsdlFileChooser.setAcceptAllFileFilterUsed(false);
        wsdlFileChooser.setDialogTitle("Open");
        wsdlFileChooser.setFileFilter(new WsdlFilter());

        valFileChooser.setAcceptAllFileFilterUsed(false);
        valFileChooser.setFileFilter(new BpmnFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Wsdl2Generator");

        genUploadPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Upload WSDL File"));

        genSelectFileLabel.setText("Please, select a WSDL 2.0 file or enter a URL:");

        genSelectFileButton.setText("Select File");
        genSelectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genSelectFileButtonActionPerformed(evt);
            }
        });

        genSelectedFileTextField.setText("No file selected");
        genSelectedFileTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                genSelectedFileTextFieldKeyReleased(evt);
            }
        });

        genLoadingFileLabel.setText("Loading file ...");

        genLoadingFileProgressBar.setIndeterminate(true);

        genInvalidDocumentLabel.setText("<html><span style=\"color:red\">Invalid WSDL Document</span></html>");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        genInputWsdlTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        genInputWsdlTree.setEnabled(false);
        genInputWsdlTree.setRootVisible(false);
        genInputWsdlTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                genInputWsdlTreeValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(genInputWsdlTree);
        ImageIcon icon = new ImageIcon("point.gif");

        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        renderer.setLeafIcon(icon);
        renderer.setClosedIcon(null);
        renderer.setOpenIcon(null);
        genInputWsdlTree.setCellRenderer(renderer);

        genFileLoadingFailedLabel.setText("<html><span style=\"color:red\">WSDL file could not be loaded</span></html>");

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        genOutputWsdlTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        genOutputWsdlTree.setEnabled(false);
        genOutputWsdlTree.setRootVisible(false);
        genOutputWsdlTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                genOutputWsdlTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(genOutputWsdlTree);
        genOutputWsdlTree.setCellRenderer(renderer);

        genSelectInputsLabel.setText("Select Inputs of BPMN Process: ");
        genSelectInputsLabel.setEnabled(false);

        genSelectOutputsLabel.setText("Select Outputs of BPMN Process:");
        genSelectOutputsLabel.setEnabled(false);

        javax.swing.GroupLayout genUploadPanelLayout = new javax.swing.GroupLayout(genUploadPanel);
        genUploadPanel.setLayout(genUploadPanelLayout);
        genUploadPanelLayout.setHorizontalGroup(
            genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genUploadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(genUploadPanelLayout.createSequentialGroup()
                        .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genSelectInputsLabel)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(genUploadPanelLayout.createSequentialGroup()
                                .addComponent(genSelectOutputsLabel)
                                .addGap(0, 59, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addComponent(genSelectFileLabel)
                    .addGroup(genUploadPanelLayout.createSequentialGroup()
                        .addComponent(genSelectFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(genUploadPanelLayout.createSequentialGroup()
                                .addComponent(genLoadingFileLabel)
                                .addGap(29, 29, 29)
                                .addComponent(genInvalidDocumentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(genSelectedFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(genUploadPanelLayout.createSequentialGroup()
                                .addComponent(genLoadingFileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(genFileLoadingFailedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        genUploadPanelLayout.setVerticalGroup(
            genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genUploadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(genSelectFileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genSelectFileButton)
                    .addComponent(genSelectedFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genLoadingFileLabel)
                    .addComponent(genInvalidDocumentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genLoadingFileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genFileLoadingFailedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genSelectInputsLabel)
                    .addComponent(genSelectOutputsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(genUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addGroup(genUploadPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(1, 1, 1)))
                .addContainerGap())
        );

        genLoadingFileLabel.setVisible(false);
        genLoadingFileProgressBar.setVisible(false);
        genInvalidDocumentLabel.setVisible(false);
        genFileLoadingFailedLabel.setVisible(false);

        genPerformPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate BPMN Process"));
        genPerformPanel.setEnabled(false);

        genSaveFilesButton.setText("Save Files");
        genSaveFilesButton.setEnabled(false);
        genSaveFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genSaveFilesButtonActionPerformed(evt);
            }
        });

        generateBpmnButton.setText("Generate BPMN");
        generateBpmnButton.setEnabled(false);
        generateBpmnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBpmnButtonActionPerformed(evt);
            }
        });

        genTargetNamespaceJTextField.setText("http://www.processTargetNamespace.com");
        genTargetNamespaceJTextField.setEnabled(false);
        genTargetNamespaceJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                genTargetNamespaceJTextFieldKeyReleased(evt);
            }
        });

        genTargetNamespaceJLabel.setText("Target Namespace:");
        genTargetNamespaceJLabel.setEnabled(false);

        genExpressionLanguageJLabel.setText("Expression Language:");
        genExpressionLanguageJLabel.setEnabled(false);

        genTypeLanguageJLabel.setText("Type Language:");
        genTypeLanguageJLabel.setEnabled(false);

        genExpressionLanguageJTextField.setText("http://www.w3.org/1999/XPath");
        genExpressionLanguageJTextField.setEnabled(false);
        genExpressionLanguageJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                genExpressionLanguageJTextFieldKeyReleased(evt);
            }
        });

        genTypeLanguageJTextField.setText("http://www.w3.org/2001/XMLSchema");
        genTypeLanguageJTextField.setEnabled(false);
        genTypeLanguageJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                genTypeLanguageJTextFieldKeyReleased(evt);
            }
        });

        genInvalidTargetNamespaceJLabel.setText("<html><span style=\"color:red\">* invalid URI</span></html>");

        genInvalidExpressionLanguageJLabel.setText("<html><span style=\"color:red\">* invalid URI</span></html>");

        genInvalidTypeLanguageJLabel.setText("<html><span style=\"color:red\">* invalid URI</span></html>");

        generatingBpmnJLabel.setText("Generating ...");

        generatingBpmnProgressBar.setIndeterminate(true);

        generationFailedJLabel.setText("<html><span style=\"color:red\">Generation failed</span></html>");

        genProcessNameJLabel.setText("Process Name:");
        genProcessNameJLabel.setEnabled(false);

        genProcessNameJTextField.setText("My Process");
        genProcessNameJTextField.setEnabled(false);
        genProcessNameJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                genProcessNameJTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout genPerformPanelLayout = new javax.swing.GroupLayout(genPerformPanel);
        genPerformPanel.setLayout(genPerformPanelLayout);
        genPerformPanelLayout.setHorizontalGroup(
            genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genPerformPanelLayout.createSequentialGroup()
                .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(genPerformPanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(generationFailedJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(genPerformPanelLayout.createSequentialGroup()
                                .addComponent(generateBpmnButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(generatingBpmnProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(generatingBpmnJLabel)))
                            .addComponent(genSaveFilesButton)))
                    .addGroup(genPerformPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genExpressionLanguageJLabel)
                            .addComponent(genTargetNamespaceJLabel)
                            .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(genProcessNameJLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(genTypeLanguageJLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(genExpressionLanguageJTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genTargetNamespaceJTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                            .addComponent(genTypeLanguageJTextField)
                            .addComponent(genProcessNameJTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genInvalidTargetNamespaceJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genInvalidExpressionLanguageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genInvalidTypeLanguageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        genPerformPanelLayout.setVerticalGroup(
            genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genPerformPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genTargetNamespaceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genTargetNamespaceJLabel)
                    .addComponent(genInvalidTargetNamespaceJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genExpressionLanguageJLabel)
                    .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(genExpressionLanguageJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(genInvalidExpressionLanguageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genTypeLanguageJLabel)
                    .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(genTypeLanguageJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(genInvalidTypeLanguageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genProcessNameJLabel)
                    .addComponent(genProcessNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(genPerformPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(generationFailedJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(genPerformPanelLayout.createSequentialGroup()
                        .addComponent(generatingBpmnJLabel)
                        .addGap(1, 1, 1)
                        .addGroup(genPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(generateBpmnButton)
                            .addComponent(generatingBpmnProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(genSaveFilesButton)
                .addContainerGap())
        );

        genInvalidTargetNamespaceJLabel.setVisible(false);
        genInvalidExpressionLanguageJLabel.setVisible(false);
        genInvalidTypeLanguageJLabel.setVisible(false);
        generatingBpmnJLabel.setVisible(false);
        generatingBpmnProgressBar.setVisible(false);
        generationFailedJLabel.setVisible(false);

        javax.swing.GroupLayout genPanelLayout = new javax.swing.GroupLayout(genPanel);
        genPanel.setLayout(genPanelLayout);
        genPanelLayout.setHorizontalGroup(
            genPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(genPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genPerformPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(genUploadPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        genPanelLayout.setVerticalGroup(
            genPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(genUploadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genPerformPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("BPMN Process Generation", genPanel);

        valUploadPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Upload BPMN File"));

        valSelectFileLabel.setText("Please, select a BPMN file or enter a URL:");

        valSelectFileButton.setText("Select File");
        valSelectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valSelectFileButtonActionPerformed(evt);
            }
        });

        valSelectedFileTextField.setText("No file selected");
        valSelectedFileTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                valSelectedFileTextFieldKeyReleased(evt);
            }
        });

        valFileLoadingFailedLabel.setText("<html><span style=\"color:red\">BPMN file could not be loaded</span></html>");

        javax.swing.GroupLayout valUploadPanelLayout = new javax.swing.GroupLayout(valUploadPanel);
        valUploadPanel.setLayout(valUploadPanelLayout);
        valUploadPanelLayout.setHorizontalGroup(
            valUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valUploadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(valUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valSelectFileLabel)
                    .addGroup(valUploadPanelLayout.createSequentialGroup()
                        .addComponent(valSelectFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(valUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(valFileLoadingFailedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valSelectedFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        valUploadPanelLayout.setVerticalGroup(
            valUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valUploadPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(valSelectFileLabel)
                .addGap(18, 18, 18)
                .addGroup(valUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valSelectFileButton)
                    .addComponent(valSelectedFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valFileLoadingFailedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        valFileLoadingFailedLabel.setVisible(false);

        valPerformPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("BPMN Validation"));

        valResultTextArea.setEditable(false);
        valResultTextArea.setColumns(20);
        valResultTextArea.setLineWrap(true);
        valResultTextArea.setRows(5);
        valResultTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(valResultTextArea);

        validateBpmnButton.setText("Validate ");
        validateBpmnButton.setEnabled(false);
        validateBpmnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateBpmnButtonActionPerformed(evt);
            }
        });

        validatingBpmnProgressBar.setIndeterminate(true);
        validatingBpmnProgressBar.setVisible(false);

        validatingBpmnJLabel.setText("Validating document...");
        validatingBpmnJLabel.setVisible(false);

        javax.swing.GroupLayout valPerformPanelLayout = new javax.swing.GroupLayout(valPerformPanel);
        valPerformPanel.setLayout(valPerformPanelLayout);
        valPerformPanelLayout.setHorizontalGroup(
            valPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valPerformPanelLayout.createSequentialGroup()
                .addGroup(valPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(valPerformPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(valPerformPanelLayout.createSequentialGroup()
                        .addGroup(valPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(valPerformPanelLayout.createSequentialGroup()
                                .addGap(272, 272, 272)
                                .addComponent(validateBpmnButton))
                            .addGroup(valPerformPanelLayout.createSequentialGroup()
                                .addGap(230, 230, 230)
                                .addGroup(valPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(validatingBpmnProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(validatingBpmnJLabel))))
                        .addGap(0, 220, Short.MAX_VALUE)))
                .addContainerGap())
        );
        valPerformPanelLayout.setVerticalGroup(
            valPerformPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, valPerformPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(validateBpmnButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(validatingBpmnJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validatingBpmnProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout valPanelLayout = new javax.swing.GroupLayout(valPanel);
        valPanel.setLayout(valPanelLayout);
        valPanelLayout.setHorizontalGroup(
            valPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(valPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(valUploadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valPerformPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        valPanelLayout.setVerticalGroup(
            valPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(valUploadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(valPerformPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("BPMN Validation", valPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //When user press genSelectFileButton
    private void genSelectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genSelectFileButtonActionPerformed

        //Try to acquire permition
        if(genSemaphore.tryAcquire()){
            
            //Open wsdl file chooser
            int returnVal = wsdlFileChooser.showOpenDialog(this);

            //If user selects a file
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                
                //Make genFileLoadingFailedLabel invisible
                genFileLoadingFailedLabel.setVisible(false);
                
                //Set text field with selected filename
                genSelectedFileTextField.setText(wsdlFileChooser.getSelectedFile().getPath());
                
                try{
                    //Convert file to URI
                    genSelectedFile = wsdlFileChooser.getSelectedFile().toURI().toURL();
                
                    //Verify if WSDL file can be opened. If not, generate exception
                    genSelectedFile.openStream();
            
                    //Call swingWorker
                    new LoadingWSDLFile().execute();
                    
                //In case WSDL file can not be opened
                } catch (IOException ex) {
                    
                    //Clear treeModel and disable genInputWsdlTree
                    genInputWsdlTree.removeSelectionPaths(inputPaths);
                    genInputWsdlTree.setModel(null);
                    genInputWsdlTree.repaint();
                    
                    //Clear treeModel and disable genOutputWsdlTree
                    genOutputWsdlTree.removeSelectionPaths(outputPaths);
                    genOutputWsdlTree.setModel(null);
                    genOutputWsdlTree.repaint();
                    
                    //Disable genSelectInputsLabel and genSelectOutputsLabel
                    genSelectInputsLabel.setEnabled(false);
                    genSelectOutputsLabel.setEnabled(false);
                
                    //Make genFileLoadingFailedLabel enabled and visible
                    genFileLoadingFailedLabel.setEnabled(true);
                    genFileLoadingFailedLabel.setVisible(true);
                
                    //Release semaphore
                    genSemaphore.release();
                }
            } //Else, if user press Cancel, release semaphore
            else
                genSemaphore.release();
        }
    }//GEN-LAST:event_genSelectFileButtonActionPerformed

    //When user press enter after inserting text in genSelectedFileTextField
    private void genSelectedFileTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genSelectedFileTextFieldKeyReleased
        
        //Try to acquire permition
        if(genSemaphore.tryAcquire()){
            
            //Make genFileLoadingFailedLabel invisible
            genFileLoadingFailedLabel.setVisible(false);
            
            //Get key typed by user
            int key = evt.getKeyCode();
        
            //If user pressed Enter
            if(key == KeyEvent.VK_ENTER){
            
                //If text field is not empty
                if(!genSelectedFileTextField.getText().equals("")){
                
                    try {
                    
                        //Verify if WSDL file is a file or URL
                        if(new File(genSelectedFileTextField.getText()).isFile())
                            genSelectedFile = new File(genSelectedFileTextField.getText()).toURI().toURL();
                        else
                            genSelectedFile = new URL(genSelectedFileTextField.getText());
                
                        //Verify if WSDL file can be opened. If not, generate exception
                        genSelectedFile.openStream();
                        
                        //Call swingWorker
                        new LoadingWSDLFile().execute();
                        
                    //In case WSDL file can not be opened
                    } catch (IOException ex) {
                        
                        //Clear treeModel and disable genInputWsdlTree
                        genInputWsdlTree.removeSelectionPaths(inputPaths);
                        genInputWsdlTree.setModel(null);
                        genInputWsdlTree.repaint();
                        
                        //Clear treeModel and disable genOutputWsdlTree
                        genOutputWsdlTree.removeSelectionPaths(outputPaths);
                        genOutputWsdlTree.setModel(null);
                        genOutputWsdlTree.repaint();
                        
                        //Disable genSelectInputsLabel and genSelectOutputsLabel
                        genSelectInputsLabel.setEnabled(false);
                        genSelectOutputsLabel.setEnabled(false);
                
                        //Make genFileLoadingFailedLabel enabled and visible
                        genFileLoadingFailedLabel.setEnabled(true);
                        genFileLoadingFailedLabel.setVisible(true);
                
                        //Release semaphore
                        genSemaphore.release();
                    }
                }//Else, if text field is empty, release semaphore
                else
                    genSemaphore.release();
            }//Else, if user pressed another key, release semaphore
            else
                genSemaphore.release();
        }
    }//GEN-LAST:event_genSelectedFileTextFieldKeyReleased

    //When user type something in genTargetNamespaceJTextField
    private void genTargetNamespaceJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genTargetNamespaceJTextFieldKeyReleased
        //Make genInvalidTargetNamespaceJLabel invisible
        genInvalidTargetNamespaceJLabel.setVisible(false);

        //Get target namespace typed by user
        genTargetNamespace = genTargetNamespaceJTextField.getText().trim();

        //Enable/Disable generateBpmnButton
        if(!genTargetNamespace.equals("") && !genExpressionLanguage.equals("") && !genTypeLanguage.equals("") && !genProcessName.equals(""))
            generateBpmnButton.setEnabled(true);
        else
            generateBpmnButton.setEnabled(false);
    }//GEN-LAST:event_genTargetNamespaceJTextFieldKeyReleased

    //When user type something in genExpressionLanguageJTextField
    private void genExpressionLanguageJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genExpressionLanguageJTextFieldKeyReleased
        //Make genInvalidExpressionLanguageJLabel invisible
        genInvalidExpressionLanguageJLabel.setVisible(false);

        //Get expression language typed by user
        genExpressionLanguage = genExpressionLanguageJTextField.getText().trim();

        //Enable/Disable generateBpmnButton
        if(!genTargetNamespace.equals("") && !genExpressionLanguage.equals("") && !genTypeLanguage.equals("") && !genProcessName.equals(""))
            generateBpmnButton.setEnabled(true);
        else
            generateBpmnButton.setEnabled(false);
    }//GEN-LAST:event_genExpressionLanguageJTextFieldKeyReleased

    //When user type something in genTypeLanguageJTextField
    private void genTypeLanguageJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genTypeLanguageJTextFieldKeyReleased
        //Make genInvalidTypeLanguageJLabel invisible
        genInvalidTypeLanguageJLabel.setVisible(false);

        //Get type language typed by user
        genTypeLanguage = genTypeLanguageJTextField.getText().trim();

        //Enable/Disable generateBpmnButton
        if(!genTargetNamespace.equals("") && !genExpressionLanguage.equals("") && !genTypeLanguage.equals("") && !genProcessName.equals(""))
            generateBpmnButton.setEnabled(true);
        else
            generateBpmnButton.setEnabled(false);
    }//GEN-LAST:event_genTypeLanguageJTextFieldKeyReleased

    //When user type something in genProcessNameJTextField
    private void genProcessNameJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genProcessNameJTextFieldKeyReleased
        //Get process name typed by user
        genProcessName = genProcessNameJTextField.getText().trim();

        //Enable/Disable generateBpmnButton
        if(!genTargetNamespace.equals("") && !genExpressionLanguage.equals("") && !genTypeLanguage.equals("") && !genProcessName.equals(""))
            generateBpmnButton.setEnabled(true);
        else
            generateBpmnButton.setEnabled(false);
    }//GEN-LAST:event_genProcessNameJTextFieldKeyReleased

    //When user press generateBpmnButton
    private void generateBpmnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBpmnButtonActionPerformed
        
        //Try to acquire permition
        if(genSemaphore.tryAcquire()){
            
            URL url;
            URI uri;
            
            boolean isValid = true;

            //Verify if targetNamespace is valid
            try {

                url = new URL(genTargetNamespace);
                uri = new URI(genTargetNamespace);

            } catch (URISyntaxException|MalformedURLException ex) {

                genInvalidTargetNamespaceJLabel.setVisible(true);
                isValid = false;
            }
            
            //Verify if expressionLanguage is valid
            try {

                url = new URL(genExpressionLanguage);
                uri = new URI(genExpressionLanguage);

            } catch (URISyntaxException|MalformedURLException ex) {

                genInvalidExpressionLanguageJLabel.setVisible(true);
                isValid = false;
            }
            
            //Verify if typeLanguage is valid
            try {
                
                url = new URL(genTypeLanguage);
                uri = new URI(genTypeLanguage);
            
            } catch (URISyntaxException|MalformedURLException ex) {
                genInvalidTypeLanguageJLabel.setVisible(true);
                isValid = false;
            }
            
            //If all fields are valid, call Swing worker. Else, release semaphore
            if(isValid)
                new GeneratingBpmn().execute();
            else
                genSemaphore.release();
        }
    }//GEN-LAST:event_generateBpmnButtonActionPerformed

    //When user press genSaveFileButton
    private void genSaveFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genSaveFilesButtonActionPerformed
        
        int returnVal = bpmnFileChooser.showSaveDialog(this);
        
        //If user selects a directory and press save button
        if (returnVal == JFileChooser.APPROVE_OPTION){
            
            try{
                
                //Save BPMN process into local file
                File localBpmnFile = new File(bpmnFileChooser.getSelectedFile().getPath() + "/" + genProcessName.replaceAll("\\s","") + ".bpmn");
                        
                PrintWriter pw = new PrintWriter(new FileWriter(localBpmnFile));
                BufferedReader br = new BufferedReader(new FileReader(genResultFile));
                    
                String line;
                while ((line = br.readLine()) != null)
                    pw.println(line);
            
                pw.close();
                br.close();
                
                //Get selected directory and concatenate new directory
                File localDirectory = new File(bpmnFileChooser.getSelectedFile().getPath() + "/" + genProcessName.replaceAll("\\s","").toLowerCase());
                
                //Create new directory inside localDirectory if it does not already exist
                if (!localDirectory.exists())
                    localDirectory.mkdir();
		
                //For each generated Java class
                for (Entry<String, File> entry : genClasses.entrySet()){
                    
                    //Recover temporary file
                    File tempFile = entry.getValue();
                    
                    //Create local file
                    File localFile = new File(localDirectory.getPath()+"/"+entry.getKey()+".java");
                    
                    pw = new PrintWriter(new FileWriter(localFile));
                    br = new BufferedReader(new FileReader(tempFile));
                    
                    while ((line = br.readLine()) != null)
                        pw.println(line);
            
                    pw.close();
                    br.close();
                }
                
            }catch(IOException ex){ 
                //Do nothing                
            }         
        }
    }//GEN-LAST:event_genSaveFilesButtonActionPerformed

    //When user press valSelectFileButton
    private void valSelectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valSelectFileButtonActionPerformed

        //Try to acquire permition
        if(valSemaphore.tryAcquire()){
            
            //Open bpmn file chooser
            int returnVal = valFileChooser.showOpenDialog(this);

            //If user selects a file
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                
                //Make valFileLoadingFailedLabel invisible
                valFileLoadingFailedLabel.setVisible(false);
                
                //Set text field with selected filename
                valSelectedFileTextField.setText(valFileChooser.getSelectedFile().getPath());
                
                try{
                    //Convert file to URI
                    valSelectedFile = valFileChooser.getSelectedFile().toURI().toURL();
                
                    //Verify if BPMN file can be opened. If not, generate exception
                    valSelectedFile.openStream();
                    
                    //Enable validateBpmnButton
                    validateBpmnButton.setEnabled(true);

                    //Clear valResultTextArea
                    valResultTextArea.setText("");
                    
                //In case BPMN file can not be opened
                } catch (IOException ex) {
                                    
                    //Make valFileLoadingFailedLabel enabled and visible
                    valFileLoadingFailedLabel.setEnabled(true);
                    valFileLoadingFailedLabel.setVisible(true);
                
                }
            }
            
            //Release semaphore
            valSemaphore.release();
        }
    }//GEN-LAST:event_valSelectFileButtonActionPerformed

    //When user press enter after inserting text in valSelectedFileTextField
    private void valSelectedFileTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valSelectedFileTextFieldKeyReleased
        
        //Try to acquire permition
        if(valSemaphore.tryAcquire()){
            
            //Make valFileLoadingFailedLabel invisible
            valFileLoadingFailedLabel.setVisible(false);
            
            //Get key typed by user
            int key = evt.getKeyCode();
        
            //If user pressed Enter
            if(key == KeyEvent.VK_ENTER){
            
                //If text field is not empty
                if(!valSelectedFileTextField.getText().equals("")){
                
                    try {
                    
                        //Verify if BPMN file is a file or URL
                        if(new File(valSelectedFileTextField.getText()).isFile())
                            valSelectedFile = new File(valSelectedFileTextField.getText()).toURI().toURL();
                        else
                            valSelectedFile = new URL(valSelectedFileTextField.getText());
                        
                        //Verify if BPMN file can be opened. If not, generate exception
                        valSelectedFile.openStream();
                        
                        //Enable validateBpmnButton
                        validateBpmnButton.setEnabled(true);

                        //Clear valResultTextArea
                        valResultTextArea.setText("");
                        
                        //Release semaphore
                        valSemaphore.release();
                    
                    //In case BPMN file can not be opened
                    } catch (IOException ex) {
                        
                        //Make valFileLoadingFailedLabel enabled and visible
                        valFileLoadingFailedLabel.setEnabled(true);
                        valFileLoadingFailedLabel.setVisible(true);
                
                        //Disable validateBpmnButton
                        validateBpmnButton.setEnabled(false);

                        //Clear valResultTextArea
                        valResultTextArea.setText("");
                        
                        //Release semaphore
                        valSemaphore.release();
                    }
                }//Else, if text field is empty, release semaphore
                else
                    valSemaphore.release();
            }//Else, if user pressed another key, release semaphore
            else
                valSemaphore.release();
        }
    }//GEN-LAST:event_valSelectedFileTextFieldKeyReleased

    //When user press validateBpmnButton
    private void validateBpmnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateBpmnButtonActionPerformed
        
        //Try to acquire permition
        if(valSemaphore.tryAcquire()){
            
            //Call swingworker
            new ValidatingBPMNFile().execute();     
            
        }
        
    }//GEN-LAST:event_validateBpmnButtonActionPerformed

    private void genInputWsdlTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_genInputWsdlTreeValueChanged
        
        //Create LinkedList "inputElements"
        genInputWsdlElements = new LinkedList<>();
        
        //Get all selected elements
        inputPaths = genInputWsdlTree.getSelectionPaths();
        
        if(inputPaths!=null){
            
            //For each selected element
            for(int i=0;i<inputPaths.length;i++){
            
                //Get leaf of component
                Object lastComponent = inputPaths[i].getLastPathComponent();
            
                //If leaf is a TreeElement
                if (lastComponent instanceof TreeElement){
                
                    //Get TreeElement
                    TreeElement element = (TreeElement) lastComponent;
                
                    //Get TreeTopLevelElement
                    TreeTopLevelElement topLevelElement = (TreeTopLevelElement) inputPaths[i].getPathComponent(3);
                
                    //Create IOElement and add it to LinkedList "inputElements"
                    IOElement aux = new IOElement(element.getName(),topLevelElement.getName(),element.getType());
                    genInputWsdlElements.add(aux);
                
                }
            }
        }
    }//GEN-LAST:event_genInputWsdlTreeValueChanged

    private void genOutputWsdlTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_genOutputWsdlTreeValueChanged
         
        //Create LinkedList "outputElements"
        genOutputWsdlElements = new LinkedList<>();
        
        //Get all selected elements
        outputPaths = genOutputWsdlTree.getSelectionPaths();
        
        if(outputPaths!=null){
        
            //For each selected element
            for(int i=0;i<outputPaths.length;i++){
            
                //Get leaf of component
                Object lastComponent = outputPaths[i].getLastPathComponent();
            
                //If leaf is a TreeElement
                if (lastComponent instanceof TreeElement){
                
                    //Get TreeElement
                    TreeElement element = (TreeElement) lastComponent;
                
                    //Get TreeTopLevelElement
                    TreeTopLevelElement topLevelElement = (TreeTopLevelElement) outputPaths[i].getPathComponent(3);
                
                    //Create IOElement and add it to LinkedList "outputElements"
                    IOElement aux = new IOElement(element.getName(),topLevelElement.getName(),element.getType());
                    genOutputWsdlElements.add(aux);
                
                }
            }
        }
    }//GEN-LAST:event_genOutputWsdlTreeValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException|InstantiationException|IllegalAccessException|javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bpmn2Generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Bpmn2Generator();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser bpmnFileChooser;
    private javax.swing.JLabel genExpressionLanguageJLabel;
    private javax.swing.JTextField genExpressionLanguageJTextField;
    private javax.swing.JLabel genFileLoadingFailedLabel;
    private javax.swing.JTree genInputWsdlTree;
    private javax.swing.JLabel genInvalidDocumentLabel;
    private javax.swing.JLabel genInvalidExpressionLanguageJLabel;
    private javax.swing.JLabel genInvalidTargetNamespaceJLabel;
    private javax.swing.JLabel genInvalidTypeLanguageJLabel;
    private javax.swing.JLabel genLoadingFileLabel;
    private javax.swing.JProgressBar genLoadingFileProgressBar;
    private javax.swing.JTree genOutputWsdlTree;
    private javax.swing.JPanel genPanel;
    private javax.swing.JPanel genPerformPanel;
    private javax.swing.JLabel genProcessNameJLabel;
    private javax.swing.JTextField genProcessNameJTextField;
    private javax.swing.JButton genSaveFilesButton;
    private javax.swing.JButton genSelectFileButton;
    private javax.swing.JLabel genSelectFileLabel;
    private javax.swing.JLabel genSelectInputsLabel;
    private javax.swing.JLabel genSelectOutputsLabel;
    private javax.swing.JTextField genSelectedFileTextField;
    private javax.swing.JLabel genTargetNamespaceJLabel;
    private javax.swing.JTextField genTargetNamespaceJTextField;
    private javax.swing.JLabel genTypeLanguageJLabel;
    private javax.swing.JTextField genTypeLanguageJTextField;
    private javax.swing.JPanel genUploadPanel;
    private javax.swing.JButton generateBpmnButton;
    private javax.swing.JLabel generatingBpmnJLabel;
    private javax.swing.JProgressBar generatingBpmnProgressBar;
    private javax.swing.JLabel generationFailedJLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JFileChooser valFileChooser;
    private javax.swing.JLabel valFileLoadingFailedLabel;
    private javax.swing.JPanel valPanel;
    private javax.swing.JPanel valPerformPanel;
    private javax.swing.JTextArea valResultTextArea;
    private javax.swing.JButton valSelectFileButton;
    private javax.swing.JLabel valSelectFileLabel;
    private javax.swing.JTextField valSelectedFileTextField;
    private javax.swing.JPanel valUploadPanel;
    private javax.swing.JButton validateBpmnButton;
    private javax.swing.JLabel validatingBpmnJLabel;
    private javax.swing.JProgressBar validatingBpmnProgressBar;
    private javax.swing.JFileChooser wsdlFileChooser;
    // End of variables declaration//GEN-END:variables

    class LoadingWSDLFile extends SwingWorker<String, Object> {
        
        @Override
        protected String doInBackground() throws Exception {
            
            //Disable all components of genUploadPanel
            Component[] genComponents = genUploadPanel.getComponents();
            for (int i = 0; i < genComponents.length; i++)
                genComponents[i].setEnabled(false);
            genInputWsdlTree.setEnabled(false);
            genOutputWsdlTree.setEnabled(false);
            
            //Make progress bar and label enabled and visible
            genLoadingFileLabel.setEnabled(true);
            genLoadingFileLabel.setVisible(true);
            genLoadingFileProgressBar.setEnabled(true);
            genLoadingFileProgressBar.setVisible(true);
            
            //Disable all components of genPerformPanel
            genComponents = genPerformPanel.getComponents();
            for (int i = 0; i < genComponents.length; i++)
                genComponents[i].setEnabled(false);
                
            //Make genInvalidDocumentLabel invisible
            genInvalidDocumentLabel.setVisible(false);
                
            try {
                
                //Initialize LinkedLists "allElements" and "allWsdlOperations"
                genAllWsdlElements = new LinkedList<>();
                genAllWsdlOperations = new HashMap<>();
                genClasses = new HashMap<>();
                
                //Read WSDL document, try to validate it and if it is a valid document then return it as a WSDL Description TreeElement
                WSDLFactory wsdlFactoryReader = WSDLFactory.newInstance();
                WSDLReader wsdlReader = wsdlFactoryReader.newWSDLReader();
                wsdlReader.setFeature(WSDLReader.FEATURE_VALIDATION, true);
                Description wsdlDescriptionComponent = wsdlReader.readWSDL(genSelectedFile.toString());
                wsdlDescriptionElement = wsdlDescriptionComponent.toElement();
                
                java.util.List<TreeInterface> interfaces = new ArrayList<>();
                
                //Obtain "ServiceElements"
                ServiceElement[] serviceElements = wsdlDescriptionElement.getServiceElements();
                
                //For each WSDL Service
                for(int i=0;i<serviceElements.length;i++){
                    
                    //Obtain "EndpointElemnts"
                    EndpointElement[] endpointElements = serviceElements[i].getEndpointElements();
                    
                    //For each WSDL Endpoint
                    for(int j=0;j<endpointElements.length;j++){
                        
                        //If is REST binding, set variable "serviceAddress"
                        if(endpointElements[j].getBindingElement().getType().toString().equals("http://www.w3.org/ns/wsdl/http"))
                            genServiceAddress = endpointElements[j].getAddress().toString();
                            
                    }
                }
                
                //Obtain "InterfaceElements"
                InterfaceElement[] wsdlInterfaces = wsdlDescriptionElement.getInterfaceElements();
                
                //For each WSDL Interface
                for(int i=0;i<wsdlInterfaces.length;i++){
                    
                    //Create tree interface and add to tree 
                    TreeInterface treeInterface = new TreeInterface(wsdlInterfaces[i].getName().getLocalPart());
                    interfaces.add(treeInterface);
                    
                    //Obtain WSDL Operations
                    InterfaceOperationElement[] wsdlOperations = wsdlInterfaces[i].getInterfaceOperationElements();
            
                    //For each WSDL Operation
                    for(int j=0;j<wsdlOperations.length;j++){
                        
                        //Set HashMap "allWsdlOperations"
                        genAllWsdlOperations.put(wsdlOperations[j].getName().getLocalPart(),wsdlInterfaces[i].getName().getLocalPart());
                        
                        //Create tree operation and add it to tree interface
                        TreeOperation treeOperation = new TreeOperation(wsdlOperations[j].getName().getLocalPart());
                        treeInterface.addOperation(treeOperation);
                        
                        //Obtain WSDL Messages
                        InterfaceMessageReferenceElement[] wsdlMessageReferences = wsdlOperations[j].getInterfaceMessageReferenceElements();
               
                        //For each WSDL Message
                        for(int k=0;k<wsdlMessageReferences.length;k++){
                            
                            //If WSDL Message is not #none
                            if(wsdlMessageReferences[k].getXmlSchemaElement() != null){
                                
                                //Create tree top level element and add it to tree operation
                                TreeTopLevelElement treeTopLevelElement = new TreeTopLevelElement(wsdlMessageReferences[k].getXmlSchemaElement().getName(),wsdlMessageReferences[k].getDirection().toString());
                                treeOperation.addTopLevelElement(treeTopLevelElement);
                                
                                //Get top level element and its type
                                XmlSchemaElement topLevelElement = wsdlMessageReferences[k].getXmlSchemaElement();
                                XmlSchemaType type = topLevelElement.getSchemaType();
                                
                                //If element is defined as a complex type
                                if (type instanceof XmlSchemaComplexType) {
                                    
                                    //Cast complex type to particle 
                                    XmlSchemaParticle particle = ((XmlSchemaComplexType)topLevelElement.getSchemaType()).getParticle();
                                    
                                    //If complex type is defined as a sequence
                                    if (particle instanceof XmlSchemaSequence) {
                                        
                                        //Cast particle to sequence
                                        XmlSchemaSequence schemaSequence = (XmlSchemaSequence) particle;
                                        
                                        //Get collection of items contained in the sequence
                                        XmlSchemaObjectCollection schemaObjectCollection = schemaSequence.getItems();
                                        
                                        //Iterate over all items contained in the sequence
                                        Iterator iterator = schemaObjectCollection.getIterator();
                                        
                                        //For each item
                                        while (iterator.hasNext()) {

                                            //Cast item to element
                                            Object element = iterator.next();

                                            //If the element is indeed a XML Schema element
                                            if (element instanceof XmlSchemaElement) {
                                                
                                                //Cast element to XML Schema element
                                                XmlSchemaElement innerElement = ((XmlSchemaElement) element);
                                                
                                                //Add element to LinkedList "allElements"
                                                IOElement aux = new IOElement(innerElement.getName(),wsdlMessageReferences[k].getXmlSchemaElement().getName(),innerElement.getSchemaTypeName().getLocalPart());
                                                genAllWsdlElements.add(aux);
                                                
                                                //Create tree element and add it to tree top level element
                                                TreeElement treeElement = new TreeElement(innerElement.getName(),innerElement.getSchemaTypeName().getLocalPart());                                                    
                                                treeTopLevelElement.addElement(treeElement);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                //Update treeModel and enable genInputWsdlTree
                WsdlTreeModel model = new WsdlTreeModel(interfaces);
                genInputWsdlTree.removeSelectionPaths(inputPaths);
                genInputWsdlTree.setModel(model);
                genInputWsdlTree.repaint();
                
                //Update treeModel and enable genOutputWsdlTree
                genOutputWsdlTree.removeSelectionPaths(outputPaths);
                genOutputWsdlTree.setModel(model);
                genOutputWsdlTree.repaint();
                
                //Enable genSelectInputsLabel and genSelectOutputsLabel
                genSelectInputsLabel.setEnabled(true);
                genSelectOutputsLabel.setEnabled(true);
                 
                //Enable all components of genPerformPanel, except genSaveFileButton and generateBpmnButton
                genComponents = genPerformPanel.getComponents();
                for (int i = 0; i < genComponents.length; i++)
                    genComponents[i].setEnabled(true);
                genSaveFilesButton.setEnabled(false);
                generateBpmnButton.setEnabled(false);
                
                //If all fields are filled, enable generateBpmnButton
                if(!genTargetNamespace.equals("") && !genExpressionLanguage.equals("") && !genTypeLanguage.equals(""))
                    generateBpmnButton.setEnabled(true);
                
            //In case WSDL document is not valid
            } catch (WSDLException ex) {
                
                //Update treeModel and disable genInputWsdlTree
                genInputWsdlTree.removeSelectionPaths(inputPaths);
                genInputWsdlTree.setModel(null);
                genInputWsdlTree.repaint();
                
                //Update treeModel and disable genOutputWsdlTree
                genOutputWsdlTree.removeSelectionPaths(outputPaths);
                genOutputWsdlTree.setModel(null);
                genOutputWsdlTree.repaint();
                
                //Disable genSelectInputsLabel and genSelectOutputsLabel
                genSelectInputsLabel.setEnabled(false);
                genSelectOutputsLabel.setEnabled(false);
                
                //Make genInvalidDocumentLabel enabled and visible
                genInvalidDocumentLabel.setEnabled(true);
                genInvalidDocumentLabel.setVisible(true);
                
                //Release semaphore
                genSemaphore.release();
            }
            
            return null;
        }
        
        protected void done() {
            
            //Make progress bar and label invisible
            genLoadingFileLabel.setVisible(false);
            genLoadingFileProgressBar.setVisible(false);
            
            //Enable all components of genUploadPanel
            Component[] genComponents = genUploadPanel.getComponents();
            for (int i = 0; i < genComponents.length; i++)
                genComponents[i].setEnabled(true);
            genInputWsdlTree.setEnabled(true);
            genOutputWsdlTree.setEnabled(true);
            
            //Release semaphore
            genSemaphore.release();
        }
    }
    
    class GeneratingBpmn extends SwingWorker<String, Object> {

        @Override
        protected String doInBackground() throws Exception {
            
            //Disable all components of genUploadPanel
            Component[] genComponents = genUploadPanel.getComponents();
            for (int i = 0; i < genComponents.length; i++)
                genComponents[i].setEnabled(false);
            genInputWsdlTree.setEnabled(false);
            genOutputWsdlTree.setEnabled(false);
                
            //Disable all components of genPerformPanel
            genComponents = genPerformPanel.getComponents();
            for (int i = 0; i < genComponents.length; i++)
                genComponents[i].setEnabled(false);
                
            //Make generationFailedJLabel invisible
            generationFailedJLabel.setVisible(false);
                
            //Make progress bar and label enabled and visible
            generatingBpmnJLabel.setEnabled(true);
            generatingBpmnJLabel.setVisible(true);
            generatingBpmnProgressBar.setEnabled(true);
            generatingBpmnProgressBar.setVisible(true);
            
            try{
                
                //Create temporary file to store generated bpmn and delete file on exit
                genResultFile = File.createTempFile(genProcessName.replaceAll("\\s",""),".bpmn");
                genResultFile.deleteOnExit();
                
                //Create printWriter to write BPMN process into file
                PrintWriter pw = new PrintWriter(new FileWriter(genResultFile));
     
                //Create BPMN definitions element
                pw.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "\n");
                pw.write("<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" "
                                + "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "
                                + "xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" "
                                + "xmlns:activiti=\"http://activiti.org/bpmn\" "
                                + "xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" "
                                + "xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" "
                                + "xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" "
                                + "xmlns:wsdl=\"" + wsdlDescriptionElement.getTargetNamespace().toString() + "\" "
                                + "typeLanguage=\"" + genTypeLanguage + "\" "
                                + "expressionLanguage=\"" + genExpressionLanguage + "\" "
                                + "targetNamespace=\"" + genTargetNamespace + "\">" + "\n");
            
                //Create BPMN Process
                pw.write("  <process id=\"" + genProcessName.replaceAll("\\s","") + "\" name=\"" + genProcessName + "\" isExecutable=\"true\">" + "\n" + "\n");
                
                //If there are input/output WSDL elements, create BPMN IOSpecification
                if(!genInputWsdlElements.isEmpty() || !genOutputWsdlElements.isEmpty()){
                
                    pw.write("    <!-- IO Specification -->" + "\n");
                
                    pw.write("    <ioSpecification id=\"InputOutputSpecification_1\">" + "\n");
                
                    //For each selected WSDL input element, create BPMN input specification
                    int count=1;
                    for(Iterator it=genInputWsdlElements.iterator();it.hasNext();){
                    
                        IOElement element = (IOElement) it.next();
                    
                        String datatype;
                        if(element.getType().equals("File") )
                            datatype = "java.io.File";
                        else if(element.getType().contains("anyType"))
                            datatype = "java.awt.image.BufferedImage";
                        else if(element.getType().equals("string") || element.getType().equals("boolean") || element.getType().equals("datetime") || element.getType().equals("double") || element.getType().equals("int") || element.getType().equals("long"))
                            datatype = "xsd:"+element.getType();
                        else //Unsupported types
                            datatype = "xsd:string";
                        
                        pw.write("      <dataInput id=\"DataInput_" + count + "\" name=\"wsdl:" + element.getOperation()+"."+ element.getName() + "\" itemSubjectRef=\""+datatype+"\"/>" + "\n");                    
                        count++;
                    }
                
                    //For each selected WSDL output element, create BPMN output specification
                    count=1;
                    for(Iterator it=genOutputWsdlElements.iterator();it.hasNext();){
                    
                        IOElement element = (IOElement) it.next();
                    
                        String datatype;
                        if(element.getType().equals("File") )
                            datatype = "java.io.File";
                        else if(element.getType().contains("anyType"))
                            datatype = "java.awt.image.BufferedImage";
                        else if(element.getType().equals("string") || element.getType().equals("boolean") || element.getType().equals("datetime") || element.getType().equals("double") || element.getType().equals("int") || element.getType().equals("long"))
                            datatype = "xsd:"+element.getType();
                        else //Unsupported types
                            datatype = "xsd:string";
                    
                        pw.write("      <dataOutput id=\"DataOutput_" + count + "\" name=\"wsdl:" + element.getOperation()+"."+ element.getName() + "\" itemSubjectRef=\""+datatype+"\"/>" + "\n");                     
                        count++;
                    }
                
                    pw.write("      <inputSet id=\"InputSet_1\">" + "\n");
                    
                    for(int i=1; i<genInputWsdlElements.size()+1;i++)
                        pw.write("        <dataInputRefs>DataInput_"+i+"</dataInputRefs>" + "\n");
                    
                    pw.write("      </inputSet>" + "\n");
                
                    pw.write("      <outputSet id=\"OutputSet_1\">" + "\n");
                
                    for(int i=1; i<genOutputWsdlElements.size()+1;i++)
                        pw.write("        <dataOutputRefs>DataOutput_"+i+"</dataOutputRefs>" + "\n");
                
                    pw.write("      </outputSet>" + "\n");
                
                    pw.write("    </ioSpecification>" + "\n" + "\n");
                }
                
                //Create BPMN Events
                pw.write("    <!-- Events -->" + "\n");
                pw.write("    <startEvent id=\"StartEvent_1\" name=\"Start Event\" />" + "\n");
                pw.write("    <endEvent id=\"EndEvent_1\" name=\"End Event\" />" + "\n" + "\n");
                
                pw.write("    <!-- Service Tasks -->" + "\n");
            
                //For each WSDL operation
                for (Entry<String, String> entry : genAllWsdlOperations.entrySet()){
                
                    String operation = entry.getKey();
                    String aux = operation; 
                    aux= aux.substring(0,1).toUpperCase() + aux.substring(1);
                
                    //Create BPMN Service Task
                    pw.write("    <serviceTask id=\"" + operation + "\" name=\"wsdl:" + entry.getValue() + "." + operation + "\" activiti:class=\"" + genProcessName.replaceAll("\\s","").toLowerCase() + "." + aux + "\" />" + "\n");
                
                    //Create temporary file to store associated Java Class and delete on exit
                    File file = File.createTempFile(aux,".java");
                    file.deleteOnExit();
                    
                    //Create printWriter to write Java Class into file
                    PrintWriter pwClass = new PrintWriter(new FileWriter(file));
                    
                    pwClass.write("package "+genProcessName.replaceAll("\\s","").toLowerCase()+";" + "\n" + "\n");
                    pwClass.write("import com.sun.jersey.api.client.Client;" + "\n");
                    pwClass.write("import com.sun.jersey.api.client.WebResource;" + "\n");
                    pwClass.write("import org.activiti.engine.delegate.DelegateExecution;" + "\n");
                    pwClass.write("import org.activiti.engine.delegate.JavaDelegate;" + "\n" + "\n");
                    pwClass.write("public class "+aux+" implements JavaDelegate {" + "\n" + "\n");
                    pwClass.write("    @Override" + "\n");
                    pwClass.write("    public void execute(DelegateExecution execution) throws Exception {" + "\n" + "\n");
                    pwClass.write("        System.out.println(\""+aux+" Operation\");" + "\n" + "\n");
                    pwClass.write("        //Connect to service" + "\n");
                    pwClass.write("        Client client= Client.create(new com.sun.jersey.api.client.config.DefaultClientConfig());" + "\n");
                    pwClass.write("        WebResource webResource = client.resource(execution.getVariable(\"wsdl:address\").toString());" + "\n" + "\n");
                    pwClass.write("        //INSERT CODE HERE" + "\n" + "\n");
                    pwClass.write("    }" + "\n");
                    pwClass.write("}");                    
                    
                    pwClass.flush();
                    pwClass.close();
                
                    //Add file to LinkedList "genClasses"
                    genClasses.put(aux, file);
                    
                }
                pw.write("\n");
                
                pw.write("    <!-- Data Objects -->" + "\n");
            
                //Create BPMN Data Object to store the service address
                pw.write("    <dataObject id=\"DataObject_1\" name=\"wsdl:address\" itemSubjectRef=\"xsd:string\">" + "\n");
                pw.write("      <extensionElements>" + "\n");
                pw.write("        <activiti:value>"+genServiceAddress+"</activiti:value>" + "\n");
                pw.write("      </extensionElements>" + "\n");
                pw.write("    </dataObject>" + "\n");
        
                //For each XML Schema element
                int count=2;
                for(Iterator it=genAllWsdlElements.iterator();it.hasNext();){
                
                    IOElement element = (IOElement) it.next();
                
                    boolean exists = false;
                
                    for(Iterator it2=genInputWsdlElements.iterator();it2.hasNext();){
                        IOElement input = (IOElement) it2.next();
                        if(element.getOperation().equals(input.getOperation()) && element.getName().equals(input.getName()))
                            exists = true;
                    }
                    for(Iterator it2=genOutputWsdlElements.iterator();it2.hasNext();){
                        IOElement output = (IOElement) it2.next();
                        if(element.getOperation().equals(output.getOperation()) && element.getName().equals(output.getName()))
                            exists = true;
                    }
                
                    //If element was not included into IOSpecification
                    if(!exists){

                        //Set datatype
                        String datatype;
                        if(element.getType().equals("File") )
                            datatype = "java.io.File";
                        else if(element.getType().contains("anyType"))
                            datatype = "java.awt.image.BufferedImage";
                        else if(element.getType().equals("string") || element.getType().equals("boolean") || element.getType().equals("datetime") || element.getType().equals("double") || element.getType().equals("int") || element.getType().equals("long"))
                            datatype = "xsd:"+element.getType();
                        else //Unsupported types
                            datatype = "xsd:string";

                        //Create BPMN Data Object to store the element
                        pw.write("    <dataObject id=\"DataObject_" + count + "\" name=\""+ element.getOperation() + "_" + element.getName()+"\" itemSubjectRef=\""+datatype+"\"/>" + "\n");
                    
                        count++;
                    }
                
                }
                pw.write("\n");
            
                //Close BPMN Process    
                pw.write("  </process>" + "\n");
            
                //Close BPMN definitions element
                pw.write("</definitions>" + "\n");
            
                pw.flush();
                pw.close();
                
            }catch(IOException ex){
                
                //Make generationFailedJLabel visible
                generationFailedJLabel.setVisible(true);
            } 
            
            return null;
        }
        
        protected void done() {
            
            //Make progress bar and label invisible
            generatingBpmnJLabel.setVisible(false);
            generatingBpmnProgressBar.setVisible(false);
            
            //Enable all components of genUploadPanel
            Component[] genComponents = genUploadPanel.getComponents();
            for (int i = 0; i < genComponents.length; i++)
                genComponents[i].setEnabled(true);
            genInputWsdlTree.setEnabled(true);
            genOutputWsdlTree.setEnabled(true);
            
            //Enable all components of genPerformPanel
            genComponents = genPerformPanel.getComponents();
            for (int i = 0; i < genComponents.length; i++)
                genComponents[i].setEnabled(true);  
           
            //Release semaphore
            genSemaphore.release();
        }
    }
    
    class ValidatingBPMNFile extends SwingWorker<String, Object> {
        
        @Override
        protected String doInBackground() throws Exception {
            
            //Disable all components of valUploadPanel
            Component[] valComponents = valUploadPanel.getComponents();
            for (int i = 0; i < valComponents.length; i++)
                valComponents[i].setEnabled(false);
                
            //Disable validateBpmnButton
            validateBpmnButton.setEnabled(false);
                
            //Clear valResultTextArea
            valResultTextArea.setText("");
                
            //Make progress bar and label visible
            validatingBpmnJLabel.setVisible(true);
            validatingBpmnProgressBar.setVisible(true);
                
            //Validate file selected by user
            try{
            
                BpmnModelInstance modelInstance = Bpmn.readModelFromStream(valSelectedFile.openStream());
                Bpmn.validateModel(modelInstance);
            
                valResultTextArea.append("Valid Document");
                valResultTextArea.setForeground(Color.blue);
                
            }catch(ModelException ex){
            
                valResultTextArea.setText(ex.getCause().getMessage());
                valResultTextArea.setForeground(Color.red);
            }       
            
            return null;
        }
        
        protected void done() {
            //Make progress bar and label invisible
            validatingBpmnJLabel.setVisible(false);
            validatingBpmnProgressBar.setVisible(false);
            
            //Enable all components of valUploadPanel
            Component[] valComponents = valUploadPanel.getComponents();
            for (int i = 0; i < valComponents.length; i++)
                valComponents[i].setEnabled(true);
            
            //Enable validateBpmnButton
            validateBpmnButton.setEnabled(true);
            
            //Release semaphore
            valSemaphore.release();
        }
    }
   
}